{"ast":null,"code":"import MuiTextField from '@material-ui/core/TextField';\nimport MuiSwitch from '@material-ui/core/Switch';\nimport MuiCheckbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport MuiSelect from '@material-ui/core/Select';\nimport { getIn } from 'formik';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport MuiRadioGroup from '@material-ui/core/RadioGroup';\nimport { createElement, useCallback } from 'react';\nimport MuiInputBase from '@material-ui/core/InputBase';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n}\n\nvar fieldToTextField = function (_a) {\n  var field = _a.field,\n      form = _a.form,\n      disabled = _a.disabled,\n      props = __rest(_a, [\"field\", \"form\", \"disabled\"]);\n\n  var name = field.name;\n  var touched = form.touched,\n      errors = form.errors,\n      isSubmitting = form.isSubmitting;\n  var fieldError = getIn(errors, name);\n  var showError = getIn(touched, name) && !!fieldError;\n  return __assign({}, props, field, {\n    error: showError,\n    helperText: showError ? fieldError : props.helperText,\n    disabled: disabled != undefined ? disabled : isSubmitting\n  });\n};\n\nvar TextField = function (_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  return createElement(MuiTextField, __assign({}, fieldToTextField(props)), children);\n};\n\nTextField.displayName = 'FormikMaterialUITextField';\n\nvar fieldToSwitch = function (_a) {\n  var field = _a.field,\n      isSubmitting = _a.form.isSubmitting,\n      disabled = _a.disabled,\n      props = __rest(_a, [\"field\", \"form\", \"disabled\"]);\n\n  return __assign({\n    disabled: disabled != undefined ? disabled : isSubmitting\n  }, props, field, {\n    value: field.name,\n    checked: field.value\n  });\n};\n\nvar Switch = function (props) {\n  return createElement(MuiSwitch, __assign({}, fieldToSwitch(props)));\n};\n\nSwitch.displayName = 'FormikMaterialUISwitch';\n\nvar fieldToCheckbox = function (_a) {\n  var field = _a.field,\n      isSubmitting = _a.form.isSubmitting,\n      disabled = _a.disabled,\n      props = __rest(_a, [\"field\", \"form\", \"disabled\"]);\n\n  return __assign({\n    disabled: disabled != undefined ? disabled : isSubmitting\n  }, props, field, {\n    checked: field.value,\n    value: field.value ? 'checked' : ''\n  });\n};\n\nvar Checkbox = function (props) {\n  return createElement(MuiCheckbox, __assign({}, fieldToCheckbox(props)));\n};\n\nCheckbox.displayName = 'FormikMaterialUICheckbox';\n\nvar CheckboxWithLabel = function (_a) {\n  var Label = _a.Label,\n      props = __rest(_a, [\"Label\"]);\n\n  return createElement(FormControlLabel, __assign({\n    control: createElement(MuiCheckbox, __assign({}, fieldToCheckbox(props)))\n  }, Label));\n};\n\nCheckboxWithLabel.displayName = 'FormikMaterialUICheckboxWithLabel';\n\nvar fieldToSelect = function (_a) {\n  var field = _a.field,\n      _b = _a.form,\n      isSubmitting = _b.isSubmitting,\n      setFieldValue = _b.setFieldValue,\n      disabled = _a.disabled,\n      props = __rest(_a, [\"field\", \"form\", \"disabled\"]);\n\n  var onChange = useCallback(function (event) {\n    if (props.multiple && props.native) {\n      var options = event.target.options;\n      var value = [];\n\n      for (var i = 0, l = options.length; i < l; i += 1) {\n        if (options[i].selected) {\n          value.push(options[i].value);\n        }\n      }\n\n      setFieldValue(field.name, value);\n    } else {\n      field.onChange(event);\n    }\n  }, [field.name, props.multiple, props.native]);\n  return __assign({\n    disabled: disabled != undefined ? disabled : isSubmitting\n  }, props, field, {\n    onChange: onChange\n  });\n};\n\nvar Select = function (props) {\n  return createElement(MuiSelect, __assign({}, fieldToSelect(props)));\n};\n\nSelect.displayName = 'FormikMaterialUISelect';\n\nvar SimpleFileUpload = function (_a) {\n  var label = _a.label,\n      field = _a.field,\n      _b = _a.form,\n      touched = _b.touched,\n      errors = _b.errors,\n      isSubmitting = _b.isSubmitting,\n      setFieldValue = _b.setFieldValue,\n      _c = _a.disabled,\n      disabled = _c === void 0 ? false : _c,\n      inputProps = _a.InputProps,\n      inputLabelProps = _a.InputLabelProps;\n  var error = getIn(touched, field.name) && getIn(errors, field.name);\n  return createElement(\"div\", null, createElement(FormControl, null, label && createElement(InputLabel, __assign({\n    shrink: true,\n    error: !!error\n  }, inputLabelProps), label), createElement(Input, __assign({\n    error: !!error,\n    inputProps: {\n      type: 'file',\n      disabled: disabled || isSubmitting,\n      name: field.name,\n      onChange: function (event) {\n        var file = event.currentTarget.files[0];\n        setFieldValue(field.name, file);\n      }\n    }\n  }, inputProps)), error && createElement(FormHelperText, {\n    error: true\n  }, error)));\n};\n\nvar fieldToRadioGroup = function (_a) {\n  var field = _a.field,\n      form = _a.form,\n      props = __rest(_a, [\"field\", \"form\"]);\n\n  return __assign({}, props, field);\n};\n\nvar RadioGroup = function (props) {\n  return createElement(MuiRadioGroup, __assign({}, fieldToRadioGroup(props)));\n};\n\nRadioGroup.displayName = 'FormikMaterialUIRadioGroup';\n\nvar fieldToInputBase = function (_a) {\n  var field = _a.field,\n      isSubmitting = _a.form.isSubmitting,\n      disabled = _a.disabled,\n      props = __rest(_a, [\"field\", \"form\", \"disabled\"]);\n\n  return __assign({\n    disabled: disabled != undefined ? disabled : isSubmitting\n  }, props, field);\n};\n\nvar InputBase = function (props) {\n  return createElement(MuiInputBase, __assign({}, fieldToInputBase(props)));\n};\n\nInputBase.displayName = 'FormikMaterialUIInputBase';\nexport { fieldToTextField, TextField, fieldToSwitch, Switch, fieldToCheckbox, Checkbox, CheckboxWithLabel, fieldToSelect, Select, SimpleFileUpload, fieldToRadioGroup, RadioGroup, fieldToInputBase, InputBase };","map":null,"metadata":{},"sourceType":"module"}